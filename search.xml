<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>信号量机制（PV操作）</title>
    <url>/2023/04/30/%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6%EF%BC%88PV%E6%93%8D%E4%BD%9C%EF%BC%89/</url>
    <content><![CDATA[<p>信号量：<strong>一个信号量对应一种资源</strong>，信号量其实就是一个变量(可以是一个整数,也可以是更复杂的记录型变量),可以用一个信号量来<strong>表示系统中某种资源的数量。</strong>P就是wait操作，等待资源，V就是++操作，释放资源。<br>用户可通过PV操作来实现进程互斥与进程同步。而对于有些书中也使用down和up分别代替PV更好理解，例如用信号量解决生产者和消费者问题：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> N 100 <span class="comment">//缓冲区中的槽数目</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> semaphore; <span class="comment">//信号量是一种特殊的整形数据</span></span><br><span class="line">semaphore mutex= <span class="number">1</span>;  <span class="comment">/*控制对临界区的访问*/</span></span><br><span class="line">semaphore empty = N;  <span class="comment">/*计数缓冲区的空槽数目*/</span></span><br><span class="line">semaphore full = <span class="number">0</span>; <span class="comment">/*计数缓冲区的满槽数目*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">producer</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"><span class="type">int</span> item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(TRUE)&#123;         <span class="comment">/*TRUE是常量1*/</span></span><br><span class="line">item =produce_item();<span class="comment">/*产生放在缓冲区中的一些数据*/</span></span><br><span class="line">down(&amp;empty);        <span class="comment">/*将空槽数目减1*/</span></span><br><span class="line">down(&amp;mutex);        <span class="comment">/*进入临界区*/</span></span><br><span class="line">insert_item(item);   <span class="comment">/*将新数据项放到缓冲区中*/</span></span><br><span class="line">up(&amp;mutex);          <span class="comment">/*离开临界区*/</span></span><br><span class="line">up(&amp;full);           <span class="comment">/*将满槽的数目加1*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">consumer</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"><span class="type">int</span> item;</span><br><span class="line"><span class="keyword">while</span>(TRUE)&#123;        <span class="comment">/*无限循环*/</span></span><br><span class="line">down(&amp;full);        <span class="comment">/*将满槽数目减1*/</span></span><br><span class="line">down(&amp;mutex);       <span class="comment">/*进入临界区*/</span></span><br><span class="line">item = remove_item();<span class="comment">/*从缓冲区中取出数据项*/</span></span><br><span class="line">up(&amp;mutex);         <span class="comment">/*离开临界区*/</span></span><br><span class="line">up(&amp;empty):         <span class="comment">/*将空槽数目加1*/</span></span><br><span class="line">consume <span class="title function_">item</span><span class="params">(item)</span>; <span class="comment">/*处理数据项*/</span> </span><br><span class="line">     &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<p>对于PV操作有如下例题：</p>
<p>1.三个进程P1、P2、P3互斥使用一个包含N（N&gt;0）个单元的缓冲区。P1每次用produce()生成一个正整数并用put()送入缓冲区某一空单元中；P2每次用getodd()从该缓冲区中取出一个奇数并用countodd()统计奇数个数；P3每次用geteven()从该缓冲区中取出一个偶数并用counteven()统计偶数个数。请用信号量机制实现这三个进程的同步与互斥活动，并说明所定义的信号量的含义。要求用伪代码描述。</p>
<p><strong>定义信号量S1控制P1与P2之间的同步；S2控制P1与P3之间的同步；empty控制生产者与消费者 之间的同步；mutex控制进程间互斥使用缓冲区。程序如下：</strong><br><strong>Var S1&#x3D;0, S2&#x3D;0, empty&#x3D;N, mutex&#x3D;1;</strong> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">P1:begin                           </span><br><span class="line">x=produce();</span><br><span class="line">P(empty);</span><br><span class="line">P(mutex);</span><br><span class="line">Put();</span><br><span class="line">V(mutex);</span><br><span class="line">If x%2==0</span><br><span class="line">V(S2);</span><br><span class="line">else</span><br><span class="line">V(S1);</span><br><span class="line">end.</span><br><span class="line"></span><br><span class="line">P2:begin                           </span><br><span class="line">P(S1);</span><br><span class="line">P(mutex);</span><br><span class="line">getodd();</span><br><span class="line">V(mutex);</span><br><span class="line">V(empty);</span><br><span class="line">countodd();</span><br><span class="line">end.</span><br><span class="line"></span><br><span class="line">P3:begin                           </span><br><span class="line">P(S2);</span><br><span class="line">P(mutex);</span><br><span class="line">geteven();</span><br><span class="line">V(mutex);</span><br><span class="line">V(empty);</span><br><span class="line">countodd();</span><br><span class="line">end.</span><br></pre></td></tr></table></figure>


<p>2.某工厂有两个生产车间和一个装配车间,两个生产车间分别生产A、B两种零件,装配车间的任务是把A、B两种零件装配成产品。两个生产车间每生产一个零件后都要分别把它们送到装配车间的货架F1、F2上,F1存放零件A,F2存放零件B,F1与F2的容量均为可以存放10个零件。装配工人每次从货架上取一个A零件和一个B零件,然后组装成产品。请用:(1) 信号量和P、V操作</p>
<p>采用信号量和P、V操作(2) 管程,进行正确的管理。</p>
<p>（1）<strong>semaphore mutex, empty1, empty2, full1, full2;</strong></p>
<p><strong>mutex&#x3D;1; &#x2F;&#x2F;互斥信号量,用于互斥使用货架</strong></p>
<p><strong>empty1&#x3D;10; &#x2F;&#x2F;同步信号量,表示货架F1可容纳的零件数</strong></p>
<p><strong>empty2&#x3D;10; &#x2F;&#x2F;同步信号量,表示货架F2可容纳的零件数</strong></p>
<p><strong>full1&#x3D;0; &#x2F;&#x2F;同步信号量,表示货架F1已放的零件数</strong></p>
<p><strong>full2&#x3D;0; &#x2F;&#x2F;同步信号量,表示货架F1已放的零件数</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">parbegin</span><br><span class="line">process <span class="title function_">workerAi</span> <span class="params">( )</span> <span class="comment">//第一个生产车间的工人进程,i=1, 2, ... , n</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">生产一个零件A;</span><br><span class="line">P(empty1); <span class="comment">//测试货架F1是否可放零件A</span></span><br><span class="line">P(mutex);</span><br><span class="line">将一个零件A放到货架F1上;</span><br><span class="line">V(mutex);</span><br><span class="line">V(full1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">process <span class="title function_">workerBj</span> <span class="params">( )</span> <span class="comment">//第二个生产车间的工人进程,j=1, 2, ... , m</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">生产一个零件B;</span><br><span class="line">P(empty2); <span class="comment">//测试货架F2是否可放零件B</span></span><br><span class="line">P(mutex);</span><br><span class="line">将一个零件B放到货架F2上</span><br><span class="line">V(mutex);</span><br><span class="line">V(full2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">process <span class="title function_">workerCi</span> <span class="params">( )</span> <span class="comment">//装配车间的工人进程,i=1, 2, ... , k</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">P(full1); <span class="comment">//测试货架F1是否可放零件A</span></span><br><span class="line">P(mutex);</span><br><span class="line">从货架F1上取一个零件A</span><br><span class="line"><span class="title function_">V</span><span class="params">(mutex)</span>;</span><br><span class="line">V(empty);</span><br><span class="line">P(full2);</span><br><span class="line">P(mutex);</span><br><span class="line">从货架F2上取一个零件B</span><br><span class="line"><span class="title function_">V</span><span class="params">(mutex)</span>;</span><br><span class="line">V(empty);</span><br><span class="line">用零件A、B组装成一个产品;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">parend</span><br></pre></td></tr></table></figure>


<p>（2）管程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type PC=monitor</span><br><span class="line">var countA, countB : integer;</span><br><span class="line">CA, CB, CCA, CCB : condition;</span><br><span class="line">procedure putA( ) //往货架F1上放一个零件A</span><br><span class="line">begin</span><br><span class="line">if countA=10 then CA.wait;</span><br><span class="line">将一个零件A放到货架F1上;</span><br><span class="line">countA := countA+1;</span><br><span class="line">if CCA.queue then CCA.signal;</span><br><span class="line">end</span><br><span class="line">procedure putB( ) //往货架F2上放一个零件B</span><br><span class="line">begin</span><br><span class="line">if countB=10 then CB.wait;</span><br><span class="line">将一个零件B放到货架F2上;</span><br><span class="line">countB := countBA+1;</span><br><span class="line">if CCB.queue then CCB.signal;</span><br><span class="line">end</span><br><span class="line">procedure getA( ) //从货架F1上取一个零件A</span><br><span class="line">begin</span><br><span class="line">if countA=0 then CCA.wait;</span><br><span class="line">从货架F1上取一个零件A</span><br><span class="line">countA := countA-1;</span><br><span class="line">if CA.queue then CA.signal;</span><br><span class="line">end</span><br><span class="line">procedure getB( ) //从货架F2上取一个零件B</span><br><span class="line">begin</span><br><span class="line">if countB=0 then CCB.wait;</span><br><span class="line">从货架F2上取一个零件B</span><br><span class="line">countB := countB-1;</span><br><span class="line">if CB.queue then CB.signal;</span><br><span class="line">end</span><br><span class="line">begin</span><br><span class="line">countA := 0; countB := 0;</span><br><span class="line">end</span><br><span class="line">采用上述管程时,本问题的算法可描述如下:</span><br><span class="line">parbegin</span><br><span class="line">process workerAi ( ) //第一个生产车间的工人进程,i=1, 2, ... , n</span><br><span class="line">begin</span><br><span class="line">repeat</span><br><span class="line">生产一个零件A;</span><br><span class="line">PC.putA( ); //将一个零件A放到货架F1上</span><br><span class="line">until false</span><br><span class="line">end</span><br><span class="line">process workerBj ( ) //第二个生产车间的工人进程,j=1, 2, ... , m</span><br><span class="line">begin</span><br><span class="line">repeat</span><br><span class="line">生产一个零件B;</span><br><span class="line">PC.putB( ); //将一个零件B放到货架F2上</span><br><span class="line">until false</span><br><span class="line">end</span><br><span class="line">process workerCi ( ) //装配车间的工人进程,i=1, 2, ... , k</span><br><span class="line">begin</span><br><span class="line">repeat</span><br><span class="line">PC.getA( ); //从货架F1上取一个零件A</span><br><span class="line">PC.getB( ); //从货架F2上取一个零件B</span><br><span class="line">用零件A、B组装成一个产品;</span><br><span class="line">until false</span><br><span class="line">end</span><br><span class="line">parend</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>PV操作</tag>
      </tags>
  </entry>
  <entry>
    <title>TinyWebserver</title>
    <url>/2023/12/21/TinyWebserver/</url>
    <content><![CDATA[<p>test</p>
]]></content>
  </entry>
  <entry>
    <title>操作系统的启动</title>
    <url>/2023/05/01/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<p>CS：代码段寄存器 IP：指令指针寄存器</p>
<p>(1)X86PC刚开机CPU为实模式（CS：PC(CS左移四位+IP)，得到物理地址，其中四位是二进制四位）</p>
<p>(2)开机时：S&#x3D;0XFFFF；IP&#x3D;0X0000</p>
<p>(3)寻址：0XFFFF0(ROM BIOS 映射区)</p>
<p>(4)检查RAM，键盘，显示器，软硬磁盘</p>
<p>(5)将磁盘0磁道0扇区读入0X7c00处(0磁道0扇区为引导扇区，一个扇区512个字节)</p>
<p>(6)设置CS&#x3D;0X07c0,IP&#x3D;0X0000</p>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>操作系统的启动</tag>
      </tags>
  </entry>
  <entry>
    <title>内存管理</title>
    <url>/2023/05/04/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3>]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>内存管理</tag>
      </tags>
  </entry>
  <entry>
    <title>文件系统</title>
    <url>/2023/05/04/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h3 id="文件系统的基本组成"><a href="#文件系统的基本组成" class="headerlink" title="文件系统的基本组成"></a>文件系统的基本组成</h3><p>Linux 文件系统会为每个文件分配两个数据结构：<strong>i节点（index node）和目录项（directory entry）</strong>，它们主要用来记录文件的元信息和目录层次结构。</p>
<ul>
<li><p>索引节点，也就是 inode，用来记录文件的元信息，比如 inode 编号、文件大小、访问权限、创建时间、修改时间、数据在磁盘的位置等等。索引节点是文件的唯一标识，它们之间一一对应，也同样都会被存储在硬盘中，所以索引节点同样占用磁盘空间。</p>
</li>
<li><p>目录项，也就是 dentry，用来记录文件的名字、索引节点指针以及与其他目录项的层级关联关系。多个目录项关联起来，就会形成目录结构，但它与索引节点不同的是，目录项是由内核维护的一个数据结构，不存放于磁盘，而是缓存在内存。</p>
<p>由于索引节点唯一标识一个文件，而目录项记录着文件的名，所以目录项和索引节点的关系是多对一，也就是说，一个文件可以有多个别字。比如，硬链接的实现就是多个目录项中的索引节点指向同一个文件。</p>
<p>注意，目录也是文件，也是用索引节点唯一标识，和普通文件不同的是，普通文件在磁盘里面保存的是文件数据，而目录文件在磁盘里面保存子目录或文件</p>
</li>
</ul>
<h3 id="i节点和文件头"><a href="#i节点和文件头" class="headerlink" title="i节点和文件头"></a>i节点和文件头</h3><p><strong>i节点</strong>是文件系统用于存储文件相关元数据的数据结构，包括文件物理位置、大小、类型、权限等信息。在文件创建和写入时，i节点中的数据需要被同时更新或修改。这些数据通常不是自动生成的，而是由相应的文件系统管理程序或操作系统内核进行设置和更新的。<br>具体来说，当用户创建一个新的文件时，文件系统会为它分配一些物理空间并记录它的物理位置信息，然后将这些信息记录到相应的i节点中。在文件的写入操作时，文件系统会根据操作系统或者文件系统设置的i节点内存储相关信息，动态地更新i节点的内容，记录文件的最新物理地址和文件大小信息。<br>需要注意的是，不同的文件系统可能会有不同的i节点格式和不同的元数据信息，因此i节点中存储的信息内容可能会有所差异。但是，无论是哪种文件系统，i节点中的数据都是文件系统管理程序或操作系统内核动态更新的，以便记录和管理文件的相关信息。</p>
<p><strong>文件头</strong>是文件系统用于存储文件相关基本信息的数据结构，通常存储在文件的开头处，并且在文件创建时就会被创建和写入。这些基本信息包括文件的类型、大小、创建时间、修改时间、访问权限等。文件头通常不是自动生成的，而是由<strong>应用程序或操作系统内核</strong>根据特定的规则和用户给定的属性来设置和填充的。<br>具体来说，当用户需要创建一个新文件时，可以通过各种应<strong>用程序或者操作系统内置命令来创建</strong>，并在创建文件时指定一些必要的基本信息，例如文件的类型、大小、文件名、访问权限等。这些基本属性信息将会被写入文件头中，以便应用程序和操作系统在访问和管理文件时能够快速读取基本信息。<br>文件头的格式和元数据信息可能会因不同的操作系统、文件系统或文件类型而异，但是它们的基本目的是相同的，即为文件存储提供一些基本元数据信息，以便应用程序和操作系统可以更好地访问、修改和管理文件。<br>总之，文件头不是自动生成的，而是由应用程序或操作系统内核根据规则和用户给定的属性进行设置和填充，以提供文件的基本元数据信息。</p>
<p><strong>若使用连续分配存储文件，i节点要记录第一块的磁盘位置和文件的块数且文件头可以不指定「起始块的位置」和「长度」吗？</strong></p>
<p>不太可能。</p>
<p>在使用连续分配方式存储文件时，i 节点需要记录第一块的磁盘位置和文件的块数，这是必要的信息，因为这些信息描述了文件的<strong>物理布局</strong>，即文件存储在哪些磁盘块中以及磁盘块的数量和顺序。操作系统需要这些信息才能正确地读取和管理文件。</p>
<p>相比之下，<strong>文件头中存储起始块的位置和长度的信息可以看作是一种优化，它可以加速文件访问和管理的过程</strong>。但是，即使文件头中没有这些信息，操作系统仍然可以通过 i 节点中的信息找到文件的起始块和长度。因此，理论上可以不在文件头中指定起始块的位置和长度，而仅在 i 节点中记录第一块的磁盘位置和文件的块数。</p>
<p>然而，在实际实现中，将文件头中存储起始块的位置和长度的信息和 i 节点中存储第一块的磁盘位置和文件的块数的信息分开记录能够更好地组织文件系统的数据结构，使其更加高效。因此，在使用连续分配方式存储文件时，通常会同时在文件头和 i 节点中记录文件的重要信息，以便实现对文件的高效访问和管理。</p>
<h3 id="文件的存储"><a href="#文件的存储" class="headerlink" title="文件的存储"></a>文件的存储</h3><p>1.连续分配</p>
<p>连续磁盘空间存放方式顾名思义，<strong>文件存放在磁盘「连续的」物理空间中</strong>。</p>
<p>优势：1.实现简单，记录每个文件用到的磁盘块简化为只需要记住连个数字即可：第一块的磁盘地址和文件的块数 2.读操作性能好，单个草做就可以从磁盘上读出整个文件。只需要一次寻找。之后不再需要寻道和旋转延迟。</p>
<p>缺点：1.磁盘空间碎片 2.文件长度不易扩展</p>
<p>例如：1.如果文件 B 被删除，磁盘上就留下一块空缺，这时，如果新来的文件小于其中的一个空缺，我们就可以将其放在相应空缺里。但如果该文件的大小大于所有的空缺，但却小于空缺大小之和， 则虽然磁盘上有足够的空缺，但该文件还是不能存放。当然了，我们可以通过将现有文件进行挪动来腾出空间以容纳新的文件，但是这个在磁盘挪动文件是非常耗时，所以这种方式不太现实。2.如果文件 A 要想扩大一下，需要更多的磁盘空间，唯一的办法就只能是挪动的方式，而这种方式效率是非常低的。</p>
<p>2.链表分配</p>
<p>为每个文件构造磁盘块链表，每个块的第一个字作为指向下一块的指针，块的其他部分存放数据。这样的方法不会因为磁盘碎片而浪费存储空间。然而链表分配方案中，顺序访问读文件比较方便，但是随机访问却相当缓慢，无法直接访问。例如如果要获得块n，操作系统每一次都必须从头开始，并且要先读前面的n-1块。</p>
<p>3.采用内存中的表进行链表分配</p>
<p>取出每个磁盘块中的指针，把他们放在内存中的一个表中。它指<strong>把用于链接文件各数据块的指针，显式地存放在内存的一张链接表中</strong>，该表在整个<strong>磁盘仅设置一张</strong>，<strong>每个表项中存放链接指针，指向下一个数据块号</strong>。</p>
<p>对于显式链接的工作方式，我们举个例子，文件 A 依次使用了磁盘块 4、7、2、10 和 12 ，文件 B 依次使用了磁盘块 6、3、11 和 14 。利用下图中的表，可以从第 4 块开始，顺着链走到最后，找到文件 A 的全部磁盘块。同样，从第 6 块开始，顺着链走到最后，也能够找出文件 B 的全部磁盘块。最后，这两个链都以一个不属于有效磁盘编号的特殊标记（如 -1 ）结束。内存中的这样一个表格称为文件分配表（File Allocation Table，FAT）。</p>
<img src="/2023/05/04/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/1.png" class="">

<img src="D:\myblog\hexoblog\source\_posts\文件系统\1.png" style="zoom:80%;" />

<p>由于查找记录的过程是在内存中进行的，因而不仅显著地提高了检索速度，而且大大减少了访问磁盘的次数。但也正是整个表都存放在内存中的关系，它的主要的缺点是不适用于<strong>大磁盘</strong>。</p>
<p>比如，对于 200GB 的磁盘和 1KB 大小的块，这张表需要有 2 亿项，每一项对应于这 2 亿个磁盘块中的一个块，每项如果需要 4 个字节，那这张表要占用 800MB 内存，很显然 FAT 方案对于大磁盘而言不太合适。</p>
<p>4.i节点</p>
<p>给每个文件赋予一个称为i节点的数据结构，其中列出了文件属性和文件块的磁盘地址。相对于在内存中采用表的方式，这种机制有很大优势，即只有在文件打开的时候，i节点才会在内存中。如果每个i节点占有n个字节，最多有K个文件同时打开，那么为保留i节点的数组所占据的内存仅仅是kn个字节，只需要提前保留这么多空间即可。</p>
<p>如果每个i节点只能存储固定数量的磁盘地址，那么当一个文件所含的磁盘块的数目超过了i节点所能容纳的数目时，只要使i节点中的最后一个“磁盘地址”不指向数据块，而是指向一个包含额外磁盘块地址的快的地址。</p>
<img src="/2023/05/04/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/2.jpg" class="">

<img src="D:\myblog\hexoblog\source\_posts\文件系统\2.jpg" alt="2"  />
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>文件系统</tag>
      </tags>
  </entry>
  <entry>
    <title>算法</title>
    <url>/2023/04/27/%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="前缀和、差分"><a href="#前缀和、差分" class="headerlink" title="前缀和、差分"></a>前缀和、差分</h1><p><strong><a href="https://leetcode.cn/problems/count-number-of-nice-subarrays/">统计优美字数组</a></strong></p>
<h1 id="双指针扫描"><a href="#双指针扫描" class="headerlink" title="双指针扫描"></a>双指针扫描</h1><h1 id="哈希表、集合、映射"><a href="#哈希表、集合、映射" class="headerlink" title="哈希表、集合、映射"></a>哈希表、集合、映射</h1><p><strong>集合</strong></p>
<ul>
<li><p>文档</p>
</li>
<li><p>unordered_set<string>s;</p>
</li>
<li><p>insert,find,erase,clear等方法</p>
</li>
<li><p>mulitest</p>
</li>
</ul>
<p>映射</p>
<ul>
<li>文档</li>
<li>unordered_map&lt;string,int&gt;h;</li>
<li>h[key]&#x3D;value;</li>
<li>find(key),erase(key),clear 等方法</li>
<li>multimap</li>
</ul>
<p>实战题目：<br><a href="https://leetcode.cn/problems/two-sum/">两数之和</a></p>
<p><a href="https://leetcode.cn/problems/walking-robot-simulation/">模拟行走机器人</a></p>
<p><a href="https://leetcode.cn/problems/group-anagrams/submissions/">字母异位词分组</a></p>
<p><a href="https://leetcode.cn/problems/substring-with-concatenation-of-all-words/submissions/">串联所有单词的子串</a></p>
<p><a href="https://leetcode.cn/problems/lru-cache/">LRU缓存</a></p>
<h1 id="递归、分治、回溯算法"><a href="#递归、分治、回溯算法" class="headerlink" title="递归、分治、回溯算法"></a>递归、分治、回溯算法</h1>]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/2023/04/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h1 id="什么是Internet"><a href="#什么是Internet" class="headerlink" title="什么是Internet?"></a>什么是Internet?</h1><h1 id="网络边缘与网络核心"><a href="#网络边缘与网络核心" class="headerlink" title="网络边缘与网络核心"></a>网络边缘与网络核心</h1>]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>调度</title>
    <url>/2023/04/30/%E8%B0%83%E5%BA%A6/</url>
    <content><![CDATA[<p>调度是系统将<strong>计算机资源</strong>分配给进程。</p>
<p>在单道程序环境下，只有一个进程存在，计算机的所有资源由一个进程独占，没有资源竞争问题。然而在多道程序环境下，多个进程并发运行，各进程之间存在资源的相互<strong>竞争</strong>，特别是对处理器资源的竞争，从而影响到系统性能。</p>
<p>例题：1.在一个单CPU的计算机系统中，有两台外部设备R1、R2和三个进程P1、P2、P3。系统采用可剥夺式优先级的进程调度方案，且所有进程可以并行使用I&#x2F;O设备，三个进程的优先级、使用设备的先后顺序和占用设备时间如下表所示：</p>
<img src="/2023/04/30/%E8%B0%83%E5%BA%A6/1.jpg" class="">

<p><strong>对于不同的进程，优先级更高的进程会首先占用CPU。</strong></p>
<p>首先P1进程使用R2资源30ms，所以P1的前30ms注明为R2。与此同时P2使用R1资源20ms，P3同时申请使用CPU 40ms。当P3申请使用CPU时，没有其它进程申请使用CPU，所以P3顺利得到了CPU的使用权。但我们可以看到，当系统时间到20ms时，P3失去了CPU资源，这是为什么呢因为此时P2已经使用完R1，它开始申请使用CPU了，P2的优先级比P3高，所以系统从P3手中收回CPU的使用权，把CPU分配给P2使用。当系统时间到30ms时，系统又从P2手中收回了CPU的使用权，把CPU分配给了P1使用，因为系统中P1的优先级比P2高。</p>
<p>P1,P2,P3占用R1，R2，CPU图像如下：</p>
<img src="/2023/04/30/%E8%B0%83%E5%BA%A6/2.jpg" class="">

<p>从图可以看出P2在使用R1设备20ms后，要使用CPU30ms，但当其运行10ms后， P1要使用CPU，由于系统采用可剥夺方式调度，P1优先级高，所以将P2暂停，让P1先运行。同理，P3开始就使用CPU，但在运行20ms后，要让给高优先级的进程P2和 P1。P1从投入运行到完成需要80ms，而P2、P3由于等待资源，运行时间都延长为100ms。 CPU在90ms～100ms共10ms时间内没有利用，所以利用率为90&#x2F;100&#x3D;90%，同样计算得R2的利用率为70&#x2F;100&#x3D;70%，R1的利用率为60%。</p>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>进程的调度</tag>
      </tags>
  </entry>
  <entry>
    <title>进程与线程</title>
    <url>/2023/04/23/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="type">char</span> *message;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    pid = fork();</span><br><span class="line">    <span class="keyword">if</span>(pid &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;fork failed&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;This is the child process. My PID is: %d. My PPID is: %d.\n&quot;</span>, getpid(), getppid());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;This is the parent process. My PID is %d.\n&quot;</span>, getpid());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="子进程读取文件内容"><a href="#子进程读取文件内容" class="headerlink" title="子进程读取文件内容"></a>子进程读取文件内容</h3><p><strong>编写一个程序prog#1，要求</strong>：</p>
<p><strong>(a) 该程序带有一个参数，用以指定要操作的文本文件</strong></p>
<p><strong>(b) 把指定文本文件的内容显示在屏幕上。</strong></p>
<p><strong>(c) 程序末尾显示总共显示了上述文件的文本行数。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 #include &lt;stdio.h&gt;</span><br><span class="line">2 #include &lt;stdlib.h&gt;</span><br><span class="line">3 #define MAX_LINE 1024</span><br><span class="line">4 int main(int argc, char* argv[]) &#123;</span><br><span class="line">5 FILE* fp;</span><br><span class="line">6 char line[MAX_LINE];</span><br><span class="line">7 int line_count = 0</span><br><span class="line">8 fp = fopen(&quot;ku.txt&quot;, &quot;r&quot;);</span><br><span class="line">9 if (fp == NULL) &#123;</span><br><span class="line">10 printf(&quot;文件不存在\n&quot;);</span><br><span class="line">11 return 0;</span><br><span class="line">12      &#125;   </span><br><span class="line">13 while (fgets(line, MAX_LINE, fp) != NULL) &#123;</span><br><span class="line">14 printf(&quot;%s&quot;, line); </span><br><span class="line">15 line_count++;</span><br><span class="line">16      &#125; </span><br><span class="line">17 fclose(fp); </span><br><span class="line">18 printf(&quot;文件共有 %d 行\n&quot;, line_count);</span><br><span class="line">19 return 0;</span><br><span class="line">20  &#125;</span><br><span class="line"> //此程序编写在shiyan01.c中                                       </span><br></pre></td></tr></table></figure>

<p><strong>编写一个主程序，该程序使用fork()来创建一个子进程，然后通过该子进程执行上述程序prog#1：</strong></p>
<p> <strong>(a) 使用exec()来执行；</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span>  <span class="comment">//该程序文件为shiyan01</span></span></span><br><span class="line"> <span class="number">2</span> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"> <span class="number">3</span> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="number">4</span> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> <span class="number">5</span> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"> <span class="number">6</span> <span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line"> 7 &#123;</span><br><span class="line"> <span class="number">8</span> <span class="type">pid_t</span> pid;</span><br><span class="line"> <span class="number">9</span> pid=fork();</span><br><span class="line"><span class="number">10</span> <span class="keyword">if</span>(pid==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="number">11</span> execl(<span class="string">&quot;/home/healer/shiyan01&quot;</span>,<span class="string">&quot;shiyan01&quot;</span>,<span class="literal">NULL</span>);</span><br><span class="line"><span class="number">12</span> &#125;</span><br><span class="line"><span class="number">13</span> <span class="keyword">else</span> <span class="keyword">if</span>( pid&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="number">14</span> wait(<span class="literal">NULL</span>);</span><br><span class="line"><span class="number">15</span> <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="number">16</span> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>(b) 使用system()来执行；</strong></p>
<h3 id="把文件复制到另一个文件"><a href="#把文件复制到另一个文件" class="headerlink" title="把文件复制到另一个文件"></a>把文件复制到另一个文件</h3><p><strong>把文件b.c复制到a.c中</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"> <span class="number">2</span> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"> <span class="number">3</span> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"> <span class="number">4</span> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"> <span class="number">5</span> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"> <span class="number">6</span> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="number">7</span> <span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line"> 8 &#123;</span><br><span class="line"> <span class="number">9</span>     <span class="type">const</span> <span class="type">char</span>* pathName=<span class="string">&quot;a.c&quot;</span>;</span><br><span class="line"><span class="number">10</span>     <span class="type">int</span> in,out,flag;</span><br><span class="line"><span class="number">11</span>     <span class="type">char</span> buffer[<span class="number">1024</span>];</span><br><span class="line"><span class="number">12</span>     in=open(<span class="string">&quot;b.c&quot;</span>,O_RDONLY,S_IRUSR);</span><br><span class="line"><span class="number">13</span>     <span class="keyword">if</span>(<span class="number">-1</span>==in)</span><br><span class="line"><span class="number">14</span>     &#123;</span><br><span class="line"><span class="number">15</span>         <span class="built_in">printf</span>(<span class="string">&quot; 打开文件b.c失败 !\n&quot;</span>);</span><br><span class="line"><span class="number">16</span>         <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="number">17</span>     &#125;</span><br><span class="line"><span class="number">18</span>     out=creat(pathName,S_IWUSR);</span><br><span class="line"><span class="number">19</span>     <span class="keyword">if</span>(<span class="number">-1</span>==in)</span><br><span class="line"><span class="number">20</span>     &#123;</span><br><span class="line"><span class="number">21</span>         <span class="built_in">printf</span>(<span class="string">&quot;创建文件 %s 失败!\n&quot;</span>,pathName);</span><br><span class="line"><span class="number">22</span>         <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="number">23</span>     &#125;</span><br><span class="line"><span class="number">24</span>     <span class="keyword">while</span>((flag=read(in,buffer,<span class="number">1024</span>))&gt;<span class="number">0</span>)</span><br><span class="line"><span class="number">25</span>     &#123;</span><br><span class="line"><span class="number">26</span>         write(out,buffer,flag);</span><br><span class="line"><span class="number">27</span>     &#125;</span><br><span class="line"><span class="number">28</span>     close(in);</span><br><span class="line"><span class="number">29</span>     close(out);</span><br><span class="line"><span class="number">30</span>     <span class="built_in">printf</span>(<span class="string">&quot;复制文件b.c到%s 完毕!\n&quot;</span>,pathName);</span><br><span class="line"><span class="number">31</span>     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="number">32</span> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h2><h3 id="管道通信"><a href="#管道通信" class="headerlink" title="管道通信"></a>管道通信</h3><p>试设计程序利用<strong>管道</strong>完成如下进行通信：</p>
<p><strong>父进程通过管道向子进程发送一个字符串”PARENT PROCESS IS SENDING YOU A MESSAGE”，子进程收到信息后将该字符串转换为小写格式然后显示出来、并向父进程发送信息”child process got the message”，父进程收到信息后将该字符串转换为大写格式然后显示出来。</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">4.</span>	<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="number">5.</span>	<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="number">6.</span>	<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="number">7.</span>	<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="number">8.</span>	<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="number">9.</span>	<span class="meta">#<span class="keyword">define</span> BUF_SIZE 100</span></span><br><span class="line"><span class="number">10.</span>	</span><br><span class="line"><span class="number">11.</span>	<span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">12.	&#123;</span><br><span class="line"><span class="number">13.</span>	 <span class="type">int</span> data_processed;</span><br><span class="line"><span class="number">14.</span>	 <span class="type">int</span> data_processed_sec;</span><br><span class="line"><span class="number">15.</span>	 <span class="type">int</span> file_pipes[<span class="number">2</span>];   <span class="comment">//子进程通过此管道写数据给父进程,文件描述符file_pipes[0]和file_pipes[1]分别构成管道的两端，往file_pipes[1]写入的数据可以从file_pipes[0]读出，并且file_pipes[1]一端只能进行写操作，file_pipes[0]一端只能进行读操作，不能反过来使用。要实现双向数据传输，可以使用两个管道。</span></span><br><span class="line"><span class="number">16.</span>	 <span class="type">int</span> file_pipes_sec[<span class="number">2</span>];<span class="comment">//父进程通过此管道写数据给子进程</span></span><br><span class="line"><span class="number">17.</span>	 <span class="type">const</span> <span class="type">char</span> dadINfo[] = <span class="string">&quot;PARENT PROCESS IS SENDING YOU A MESSAGE&quot;</span>;</span><br><span class="line"><span class="number">18.</span>	 <span class="type">const</span> <span class="type">char</span> sonINfo[] = <span class="string">&quot;child got the message&quot;</span>;</span><br><span class="line"><span class="number">19.</span>	 <span class="type">char</span> buffer[BUF_SIZE +<span class="number">1</span>];</span><br><span class="line"><span class="number">20.</span>	 <span class="type">char</span> buffer_sec[BUF_SIZE +<span class="number">1</span>];</span><br><span class="line"><span class="number">21.</span>	 </span><br><span class="line"><span class="number">22.</span>	    <span class="type">pid_t</span> fork_result;<span class="comment">//进程号</span></span><br><span class="line"><span class="number">23.</span>	 </span><br><span class="line"><span class="number">24.</span>	 <span class="built_in">memset</span>(buffer,<span class="string">&#x27;\0&#x27;</span>,<span class="keyword">sizeof</span>(buffer)); <span class="comment">//buffer初始化为0</span></span><br><span class="line"><span class="number">25.</span>	 </span><br><span class="line"><span class="number">26.</span>	 <span class="keyword">if</span>(pipe(file_pipes) == <span class="number">0</span> &amp;&amp; pipe(file_pipes_sec) == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="number">27.</span>	  fork_result = fork();<span class="comment">//创建进程</span></span><br><span class="line"><span class="number">28.</span>	  <span class="keyword">if</span>(fork_result ==  - <span class="number">1</span>)&#123;<span class="comment">//进程创建失败</span></span><br><span class="line"><span class="number">29.</span>	   <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;Fork failusre&quot;</span>);</span><br><span class="line"><span class="number">30.</span>	   <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="number">31.</span>	  &#125;</span><br><span class="line"><span class="number">32.</span>	  <span class="keyword">if</span>(fork_result == <span class="number">0</span>)&#123;<span class="comment">//子进程</span></span><br><span class="line"><span class="number">33.</span>	   data_processed_sec = read(file_pipes_sec[<span class="number">0</span>],buffer_sec,BUF_SIZE);<span class="comment">//子进程读数据，存于buffer_sec中</span></span><br><span class="line"><span class="number">34.</span>	   <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="number">35.</span>	   <span class="keyword">for</span>(;buffer_sec[i]!=<span class="string">&#x27;\0&#x27;</span>;i++)</span><br><span class="line"><span class="number">36.</span>	    <span class="keyword">if</span>(buffer_sec[i]&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;buffer_sec[i]&lt;=<span class="string">&#x27;Z&#x27;</span>) </span><br><span class="line"><span class="number">37.</span>	      buffer_sec[i] += <span class="number">32</span>;</span><br><span class="line"><span class="number">38.</span>	   <span class="built_in">printf</span>(<span class="string">&quot;%d - 子进程接收，转为小写显示:%s \n&quot;</span>,getpid(),buffer_sec);</span><br><span class="line"><span class="number">39.</span>	   data_processed = write(file_pipes[<span class="number">1</span>],sonINfo,<span class="built_in">strlen</span>(sonINfo));<span class="comment">//子进程写数据</span></span><br><span class="line"><span class="number">40.</span>	   <span class="built_in">printf</span>(<span class="string">&quot;%d - 子进程写:child got the message\n&quot;</span>,getpid());</span><br><span class="line"><span class="number">41.</span>	   <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="number">42.</span>	  &#125;</span><br><span class="line"><span class="number">43.</span>	  <span class="keyword">else</span>&#123;<span class="comment">//父进程</span></span><br><span class="line"><span class="number">44.</span>	   data_processed_sec = write(file_pipes_sec[<span class="number">1</span>],dadINfo,<span class="built_in">strlen</span>(dadINfo));<span class="comment">//父进程写数据</span></span><br><span class="line"><span class="number">45.</span>	   <span class="built_in">printf</span>(<span class="string">&quot;%d - 父进程写：PARENT PROCESS IS SENDING YOU A MESSAGE%d \n&quot;</span>,getpid()); </span><br><span class="line"><span class="number">46.</span>	   data_processed = read(file_pipes[<span class="number">0</span>],buffer,BUF_SIZE);<span class="comment">//父进程读数据，数据存于buffer中</span></span><br><span class="line"><span class="number">47.</span>	   <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="number">48.</span>	   <span class="keyword">for</span>(;buffer[i]!=<span class="string">&#x27;\0&#x27;</span>;i++)</span><br><span class="line"><span class="number">49.</span>	    <span class="keyword">if</span>(buffer[i]&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;buffer[i]&lt;=<span class="string">&#x27;z&#x27;</span>) </span><br><span class="line"><span class="number">50.</span>	      buffer[i] -= <span class="number">32</span>;</span><br><span class="line"><span class="number">51.</span>	   <span class="built_in">printf</span>(<span class="string">&quot;%d - 父进程接收，转为大写显示:%s \n&quot;</span>,getpid(),buffer);</span><br><span class="line"><span class="number">52.</span>	  &#125;</span><br><span class="line"><span class="number">53.</span>	 &#125;</span><br><span class="line"><span class="number">54.</span>	 <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="number">55.</span>	&#125;</span><br></pre></td></tr></table></figure>

<img src="/2023/04/23/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/1.jpg" class="">

<h3 id="共享内存进行通信"><a href="#共享内存进行通信" class="headerlink" title="共享内存进行通信"></a>共享内存进行通信</h3><p>试设计程序利用<strong>共享内存</strong>完成如下进程通信： </p>
<p><strong>父进程创建一个共享内存段，然后由子进程将该共享内存附加到自己的地址空间中，并在该共享内存中写入如下信息：“俺是子进程，在给你发送信息！”。在等待子进程对共享内存的操作完成后，父进程将该共享内存附加到自己的地址空间中，并读出该共享内存的信息以及该共享内存段的其它信息（内存大小、建立该共享内存的进程ID、操作该共享内存段的进程ID）并一起显示出来。</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>	<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="number">2.</span>	<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="number">3.</span>	<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="number">4.</span>	<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="number">5.</span>	<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="number">6.</span>	</span><br><span class="line"><span class="number">7.</span>	<span class="meta">#<span class="keyword">define</span> BUF_SIZE 100</span></span><br><span class="line"><span class="number">8.</span>	<span class="meta">#<span class="keyword">define</span> SHM_SIZE 1024</span></span><br><span class="line"><span class="number">9.</span>	</span><br><span class="line"><span class="number">10.</span>	</span><br><span class="line"><span class="number">11.</span>	<span class="meta">#<span class="keyword">define</span> TEXT_SZ 2048</span></span><br><span class="line"><span class="number">12.</span>	</span><br><span class="line"><span class="number">13.</span>	<span class="class"><span class="keyword">struct</span> <span class="title">shared_use_st</span>&#123;</span></span><br><span class="line"><span class="number">14.</span>	 <span class="type">int</span> written;<span class="comment">//作为一个标志，非0：表示可读，0表示可写</span></span><br><span class="line"><span class="number">15.</span>	 <span class="type">char</span> text[TEXT_SZ];<span class="comment">//记录写入和读取的文本</span></span><br><span class="line"><span class="number">16.</span>	&#125;;</span><br><span class="line"><span class="number">17.</span>	</span><br><span class="line"><span class="number">18.</span>	 <span class="type">pid_t</span> son;</span><br><span class="line"><span class="number">19.</span>	<span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">20.	&#123;</span><br><span class="line"><span class="number">21.</span>	</span><br><span class="line"><span class="number">22.</span>	    <span class="type">pid_t</span> pid;<span class="comment">//进程号</span></span><br><span class="line"><span class="number">23.</span>	 <span class="type">int</span> running = <span class="number">1</span>;<span class="comment">//程序是否继续运行的标志</span></span><br><span class="line"><span class="number">24.</span>	 <span class="type">void</span> *shm = <span class="literal">NULL</span>;<span class="comment">//分配的共享内存的原始首地址</span></span><br><span class="line"><span class="number">25.</span>	 <span class="type">char</span> buffer[BUF_SIZE + <span class="number">1</span>];<span class="comment">//用于保存输入的文本</span></span><br><span class="line"><span class="number">26.</span>	 <span class="class"><span class="keyword">struct</span> <span class="title">shared_use_st</span> *<span class="title">shared</span>;</span><span class="comment">//指向shm</span></span><br><span class="line"><span class="number">27.</span>	 <span class="type">int</span> shmid;<span class="comment">//共享内存标识符</span></span><br><span class="line"><span class="number">28.</span>	</span><br><span class="line"><span class="number">29.</span>	 <span class="comment">//创建共享内存</span></span><br><span class="line"><span class="number">30.</span>	 shmid = shmget((<span class="type">key_t</span>)<span class="number">1234</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> shared_use_st), <span class="number">0666</span>|IPC_CREAT);</span><br><span class="line"><span class="number">31.</span>	 </span><br><span class="line"><span class="number">32.</span>	 <span class="keyword">if</span>(shmid == <span class="number">-1</span>)</span><br><span class="line"><span class="number">33.</span>	 &#123;</span><br><span class="line"><span class="number">34.</span>	  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;shmget failed\n&quot;</span>);</span><br><span class="line"><span class="number">35.</span>	  <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line"><span class="number">36.</span>	 &#125;</span><br><span class="line"><span class="number">37.</span>	 </span><br><span class="line"><span class="number">38.</span>	    <span class="comment">//创建子进程</span></span><br><span class="line"><span class="number">39.</span>	    pid = fork();</span><br><span class="line"><span class="number">40.</span>	 </span><br><span class="line"><span class="number">41.</span>	    <span class="keyword">if</span> ( <span class="number">0</span> &gt; pid )</span><br><span class="line"><span class="number">42.</span>	    &#123;</span><br><span class="line"><span class="number">43.</span>	        perror(<span class="string">&quot;fork error&quot;</span>);</span><br><span class="line"><span class="number">44.</span>	        shmctl(shmid, IPC_RMID, <span class="literal">NULL</span>);</span><br><span class="line"><span class="number">45.</span>	        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="number">46.</span>	    &#125;</span><br><span class="line"><span class="number">47.</span>	 </span><br><span class="line"><span class="number">48.</span>	    <span class="keyword">else</span> <span class="keyword">if</span> (  pid &gt; <span class="number">0</span> )</span><br><span class="line"><span class="number">49.</span>	    &#123;</span><br><span class="line"><span class="number">50.</span>	 <span class="comment">//将共享内存连接到当前进程的地址空间</span></span><br><span class="line"><span class="number">51.</span>	 shm = shmat(shmid, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="number">52.</span>	 <span class="keyword">if</span>(shm == (<span class="type">void</span>*)<span class="number">-1</span>)</span><br><span class="line"><span class="number">53.</span>	 &#123;</span><br><span class="line"><span class="number">54.</span>	  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;shmat failed\n&quot;</span>);</span><br><span class="line"><span class="number">55.</span>	  <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line"><span class="number">56.</span>	 &#125;</span><br><span class="line"><span class="number">57.</span>	 <span class="built_in">printf</span>(<span class="string">&quot;\n当前父进程内存地址：%X进程号：%d\n&quot;</span>, (<span class="type">int</span>)shm,getpid());</span><br><span class="line"><span class="number">58.</span>	 <span class="comment">//设置共享内存</span></span><br><span class="line"><span class="number">59.</span>	 shared = (<span class="keyword">struct</span> shared_use_st*)shm;</span><br><span class="line"><span class="number">60.</span>	 shared-&gt;written = <span class="number">0</span>;</span><br><span class="line"><span class="number">61.</span>	</span><br><span class="line"><span class="number">62.</span>	 <span class="keyword">while</span>(running)<span class="comment">//读取共享内存中的数据</span></span><br><span class="line"><span class="number">63.</span>	 &#123;</span><br><span class="line"><span class="number">64.</span>	  </span><br><span class="line"><span class="number">65.</span>	  <span class="comment">//没有进程向共享内存定数据有数据可读取</span></span><br><span class="line"><span class="number">66.</span>	  <span class="keyword">if</span>(shared-&gt;written != <span class="number">0</span>)</span><br><span class="line"><span class="number">67.</span>	  &#123;</span><br><span class="line"><span class="number">68.</span>	   <span class="built_in">printf</span>(<span class="string">&quot;父进程读取共享内存: %s\n&quot;</span>, shared-&gt;text);</span><br><span class="line"><span class="number">69.</span>	   sleep(rand() % <span class="number">3</span>);</span><br><span class="line"><span class="number">70.</span>	   <span class="comment">//读取完数据，设置written使共享内存段可写</span></span><br><span class="line"><span class="number">71.</span>	   shared-&gt;written = <span class="number">0</span>;</span><br><span class="line"><span class="number">72.</span>	   <span class="comment">//输入了end，退出循环（程序）</span></span><br><span class="line"><span class="number">73.</span>	   <span class="built_in">printf</span>(<span class="string">&quot;建立共享内存的进程号为：%d,内存大小为%d\n&quot;</span>,getpid(),SHM_SIZE);</span><br><span class="line"><span class="number">74.</span>	   <span class="keyword">if</span>(<span class="built_in">strncmp</span>(shared-&gt;text, <span class="string">&quot;end&quot;</span>, <span class="number">3</span>) == <span class="number">0</span>)</span><br><span class="line"><span class="number">75.</span>	    running = <span class="number">0</span>;</span><br><span class="line"><span class="number">76.</span>	  &#125;</span><br><span class="line"><span class="number">77.</span>	  <span class="keyword">else</span><span class="comment">//有其他进程在写数据，不能读取数据</span></span><br><span class="line"><span class="number">78.</span>	   sleep(<span class="number">1</span>);</span><br><span class="line"><span class="number">79.</span>	 &#125;</span><br><span class="line"><span class="number">80.</span>	 <span class="comment">//把共享内存从当前进程中分离</span></span><br><span class="line"><span class="number">81.</span>	 <span class="keyword">if</span>(shmdt(shm) == <span class="number">-1</span>)</span><br><span class="line"><span class="number">82.</span>	 &#123;</span><br><span class="line"><span class="number">83.</span>	  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;shmdt failed\n&quot;</span>);</span><br><span class="line"><span class="number">84.</span>	  <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line"><span class="number">85.</span>	 &#125;</span><br><span class="line"><span class="number">86.</span>	 <span class="comment">//删除共享内存</span></span><br><span class="line"><span class="number">87.</span>	 <span class="keyword">if</span>(shmctl(shmid, IPC_RMID, <span class="number">0</span>) == <span class="number">-1</span>)</span><br><span class="line"><span class="number">88.</span>	 &#123;</span><br><span class="line"><span class="number">89.</span>	  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;shmctl(IPC_RMID) failed\n&quot;</span>);</span><br><span class="line"><span class="number">90.</span>	  <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line"><span class="number">91.</span>	 &#125;</span><br><span class="line"><span class="number">92.</span>	 <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line"><span class="number">93.</span>	</span><br><span class="line"><span class="number">94.</span>	    &#125;</span><br><span class="line"><span class="number">95.</span>	    <span class="keyword">else</span></span><br><span class="line"><span class="number">96.</span>	    &#123;</span><br><span class="line"><span class="number">97.</span>	     <span class="comment">//将共享内存连接到当前进程的地址空间</span></span><br><span class="line"><span class="number">98.</span>	 shm = shmat(shmid, (<span class="type">void</span>*)<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="number">99.</span>	 <span class="keyword">if</span>(shm == (<span class="type">void</span>*)<span class="number">-1</span>)</span><br><span class="line"><span class="number">100.</span>	 &#123;</span><br><span class="line"><span class="number">101.</span>	  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;shmat failed\n&quot;</span>);</span><br><span class="line"><span class="number">102.</span>	  <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line"><span class="number">103.</span>	 &#125;</span><br><span class="line"><span class="number">104.</span>	  </span><br><span class="line"><span class="number">105.</span>	 <span class="built_in">printf</span>(<span class="string">&quot;当前子进程内存地址：%X进程号：%d\n&quot;</span>, (<span class="type">int</span>)shm,getpid());</span><br><span class="line"><span class="number">106.</span>	 son = getpid();</span><br><span class="line"><span class="number">107.</span>	 <span class="comment">//设置共享内存</span></span><br><span class="line"><span class="number">108.</span>	 shared = (<span class="keyword">struct</span> shared_use_st*)shm;</span><br><span class="line"><span class="number">109.</span>	   </span><br><span class="line"><span class="number">110.</span>	 <span class="keyword">while</span>(running)<span class="comment">//向共享内存中写数据</span></span><br><span class="line"><span class="number">111.</span>	 &#123;</span><br><span class="line"><span class="number">112.</span>	  <span class="comment">//数据还没有被读取，则等待数据被读取,不能向共享内存中写入文本</span></span><br><span class="line"><span class="number">113.</span>	  <span class="keyword">while</span>(shared-&gt;written == <span class="number">1</span>)</span><br><span class="line"><span class="number">114.</span>	  &#123;</span><br><span class="line"><span class="number">115.</span>	   sleep(<span class="number">1</span>);</span><br><span class="line"><span class="number">116.</span>	   <span class="built_in">printf</span>(<span class="string">&quot;Waiting...\n&quot;</span>);</span><br><span class="line"><span class="number">117.</span>	  &#125;</span><br><span class="line"><span class="number">118.</span>	  <span class="comment">//向共享内存中写入数据</span></span><br><span class="line"><span class="number">119.</span>	  <span class="built_in">printf</span>(<span class="string">&quot;子进程向共享内存写入: &quot;</span>);</span><br><span class="line"><span class="number">120.</span>	  fgets(buffer, BUFSIZ, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="number">121.</span>	  <span class="built_in">strncpy</span>(shared-&gt;text, buffer, TEXT_SZ);</span><br><span class="line"><span class="number">122.</span>	  <span class="comment">//写完数据，设置written使共享内存段可读</span></span><br><span class="line"><span class="number">123.</span>	  shared-&gt;written = <span class="number">1</span>;</span><br><span class="line"><span class="number">124.</span>	  <span class="comment">//输入了end，退出循环（程序）</span></span><br><span class="line"><span class="number">125.</span>	    <span class="built_in">printf</span>(<span class="string">&quot;操作共享内存的进程号为%d&quot;</span>,getpid());</span><br><span class="line"><span class="number">126.</span>	  <span class="keyword">if</span>(<span class="built_in">strncmp</span>(buffer, <span class="string">&quot;end&quot;</span>, <span class="number">3</span>) == <span class="number">0</span>)</span><br><span class="line"><span class="number">127.</span>	   running = <span class="number">0</span>;</span><br><span class="line"><span class="number">128.</span>	 &#125;</span><br><span class="line"><span class="number">129.</span>	 <span class="comment">//把共享内存从当前进程中分离</span></span><br><span class="line"><span class="number">130.</span>	 <span class="keyword">if</span>(shmdt(shm) == <span class="number">-1</span>)</span><br><span class="line"><span class="number">131.</span>	 &#123;</span><br><span class="line"><span class="number">132.</span>	  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;shmdt failed\n&quot;</span>);</span><br><span class="line"><span class="number">133.</span>	  <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line"><span class="number">134.</span>	 &#125;</span><br><span class="line"><span class="number">135.</span>	 sleep(<span class="number">2</span>);</span><br><span class="line"><span class="number">136.</span>	 <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line"><span class="number">137.</span>	    &#125;</span><br><span class="line"><span class="number">138.</span>	    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="number">139.</span>	&#125;</span><br><span class="line"><span class="number">140.</span>	 </span><br><span class="line"><span class="number">141.</span>	 </span><br><span class="line"></span><br></pre></td></tr></table></figure>













































<hr>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>进程与线程</tag>
      </tags>
  </entry>
</search>
